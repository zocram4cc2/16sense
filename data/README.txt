This folder contains an attempt at representing the AI data in a somewhat
simple format for readability. The format could be a lot simpler but it's an
old project, so it's what it is. Maybe one day it'll be revamped to be a 
more sensible one, but for now, this readme tries to explain how to read
the files included in this folder.

--------------------------------- INDEX_XXX --------------------------------
These are automatically generated by "bin.py" and act as the index of their
respective binaries. They can be used as an easy reference when manually hex
editing the binaries, and help keep track of files contained in a specific
binary.

---------------------------------- FOLDERS ---------------------------------
The "match", "player" and "team" folders contain the data of their respective
binaries split into several text files, one for each .json file packed
into the binary. The ones directly in the folder contain the values in the
order they appear in the binary, along with comments detailing which variable
the value maps to.

The "reconst" folders contain the variable names and are there just to try to
map out the file structure more clearly. They can be used as a reference when
going through the data files, but right now they're mostly included for the
sake of it and maybe as a base for a better file format that combines both 
data and correct structure into one single file cleanly.

----------------------------------- FILES ----------------------------------
I'll try to explain some of the quirks of the data text files here. The most
difficult things to fully grasp are the "arrays" and the multi-value blocks
marked with //HEX.

Arrays are defined in the raw AI data by their starting byte. So if the
values of an array start from byte 160, the array's initial value will be 160
instead of 7.0 or -1.5 or whatever might be expected. This also applies to 
nested arrays. If an array contains an array, the child array's value will be
its starting byte just like the parent array's value before was its starting
byte.

Multi-value blocks are Konami's way of both saving precious bytes AND making
everyone's life difficult. I think I caught all of them, so you probably
don't have to worry about them that much. They're noted as //HEX, contains... 
in the text files. The "contains ..." part tells which variables are defined 
by the block. If there is a "NULL" in the "contains" part, that means that 
specific part of the block doesn't define anything.

So, for example "//HEX 0x01010000, contains x, y, z, NULL" means x=0x01,
y=0x01, z=0x00, and the final 0x00 doesn't affect anything.

There's a lot more, like triple-nested arrays containing multi-value blocks,
but those cases are extermely rare (1-2 files out of 100) and explaining all
the border cases would make this needlessly long. If you really want to
torture yourself, though, I'll gladly explain them if you reach out.